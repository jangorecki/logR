% Generated by roxygen2 (4.0.1): do not edit by hand
\name{logR}
\alias{logR}
\title{Evalute and log details}
\usage{
logR(expr, silent = FALSE, tag = NA_character_, in_rows = NA_integer_,
  conn = getOption("logR.conn", NULL),
  log_table = getOption("logR.log_table", "logR"), mail = FALSE,
  mail.args = getOption("logR.mail.args", list()),
  verbose = getOption("logR.verbose", 1))
}
\arguments{
\item{expr}{expression to be evaluted with logging.}

\item{silent}{logical, if \code{TRUE} it will not raise \code{alert} (warning/error), no email alert also.}

\item{mail}{logical flag, if \code{TRUE} then on \code{alert} (warning/error) will send email. Hard default \code{FALSE} due to possible cascade \code{alert}, should be used only in top logR call.}

\item{mail.args}{list of args to be exactly passed to \code{send.mail}. Can be provided in options \code{options("logR.mail.args")}.}

\item{tag}{character, custom \code{logR} call metadata to be logged in db.}

\item{in_rows}{integer input DT nrow, \code{logR} will only \emph{guest} \code{out_rows}.}

\item{conn}{database connection. Can be provided in options \code{options("logR.conn")}.}

\item{log_table}{character vector, location in database to store logs, default \code{"logR"}, can be vector of length 2 to use schema: \code{c("public","logR")}. Can be provided in options \code{options("logR.log_table")}.}

\item{verbose}{integer, default \code{1}, if \code{verbose > 0} it prints \code{alert} messages to console during the processing. Can be provided in options \code{options("logR.verbose")}.}
}
\value{
Result of \code{expr}, unless it's error and \code{silent=FALSE}.
}
\description{
Complete logging solution. Evalutes, catch warning/error, log processing details to database. Log timing, in/out rows, custom metadata, waring/error messages. In case of \code{alert} also send email.
}
\section{Side effects}{

\itemize{
\item entry in database \code{conn} in table \code{log_table}.
\item if \code{mail & alert & !silent} email send according to \code{mail.args} argument.
}
}

\section{Mail alerts}{

It is possible to include processing log details in the email body. To achieve it just use the \code{mail.args} with \code{html=TRUE} and \code{body="logR"}, body will be overwritten. In case of any issues related to \code{mailR} debug with \code{do.call(send.mail, args = mail.args)}.
}
\examples{
\dontrun{
  # connect and prepare data
  conn <- dbConnect(...)
  options("logR.conn" = conn)
  f1 <- function(x) if(x==1) stop('lowest level error') else data.table(a=1:10,b=letters[1:10])
  f2 <- function(x) if(x==2) stop('low level error') else logR(f1(x))
  f3 <- function(x) if(x==3) stop('mid level error') else logR(f2(x))
  f4 <- function(x) if(x==4) stop('high level error') else logR(f3(x))
  f5 <- function(x) if(x==5) stop('highest level error') else logR(f4(x))
  # run
  x <- 2 # 1-5 will raise errors
  logR(f5(x))
  # check
  (DT <- as.data.table(dbReadTable(conn, "logR")))
  # close
  dbDisconnect(conn)
}
}
\references{
\url{https://github.com/jangorecki/logR}\cr\url{https://github.com/rpremraj/mailR}
}

