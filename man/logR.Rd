% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/logR.R
\name{logR}
\alias{logR}
\title{Detailed logging of R call}
\usage{
logR(CALL, tag = NA_character_, in_rows = NA_integer_,
  silent = getOption("logR.silent"), mail = getOption("logR.mail"),
  mail_args = getOption("logR.mail_args"), .db = getOption("logR.db"),
  .conn = getOption("logR.conn"), .table = getOption("logR.table"),
  .log = getOption("logR.log"))
}
\arguments{
\item{CALL}{call to be evaluted with logging.}

\item{tag}{character, custom metadata to be attached to log entry.}

\item{in_rows}{integer input DF/DT nrow, \emph{logR} can only guess \emph{out_rows}.}

\item{silent}{logical, if default \code{getOption("logR.silent",TRUE)} it will not raise warning or error but only log/email it.}

\item{mail}{logical if \emph{TRUE} then on warning/error the email will be send. Requires \emph{mail_args} to be provided. Default \code{getOption("logR.mail",FALSE)}.}

\item{mail_args}{list of args which will overwrite the default logR args passed to \code{mailR::send.mail}, should at least contains \emph{to, from, smtp} elements. Default \code{getOption("logR.mail_args",NULL)}. See references for mail configuration.}

\item{.db}{logical, when \emph{FALSE} then function will write log to csv file instead of database. Default to \code{getOption("logR.db",FALSE)}.}

\item{.conn}{character database connection name defined for \link[dwtools]{db} function. Default to \code{options("logR.conn",NULL)}.}

\item{.table}{character scalar, location in database to store logs, default \code{getOptions("logR.table")}.}

\item{.log}{logical escape parameter, set to \emph{FALSE} to suppress logR process and just execute a call, default to \code{getOption("logR.log",TRUE)}.}
}
\value{
Result of evaluated \emph{CALL}.
}
\description{
Complete logging solution. Writes to database the process metadata before evaluation, and updates the status after completion. Evalutes with timing, catch warning/error, email on warning/errors, log processing details: in/out rows, custom metadata, warning/error messages.
}
\note{
You may expect some silent data types conversion when writing to database, exactly the same as you would use DBI, RODBC, RJDBC packages. Only first warning will be logged to database and send on email.
}
\section{Side effects}{

\itemize{
\item for default \emph{.db} \emph{TRUE} and \emph{.conn} character name of defined db connection - the entry in table \emph{.table}.
\item for \emph{.db} \emph{FALSE} - the entry in \emph{.table} csv file in working directory.
\item in case of warnings or error and \emph{mail} set to \emph{TRUE} also the email will be send according to \emph{mail_args}.
}
}

\section{Database setup}{

Logging process requires 3 database objects:
\itemize{
\item \strong{sequence} - required for transactional logging
\item \strong{view} - query sequence, it isolates various SQL \code{.nextval} calls on the database side
\item \strong{table} - place to store logs
}
You can create all three objects automatically using \link{logR_schema} function, it works for \emph{h2, sql server, postgres, oracle} databases. For other databases you can adjust scripts from \link{schema_sql}.
View must return \emph{logr_id} column and should be named \code{getOption("logR.seq_view","LOGR_ID")}. Default name of log table is \code{getOption("logR.table","LOGR")}.
Due to various supported database interfaces it is recommended to set maximum value of the sequence to \code{.Machine$integer.max} which is \emph{2147483647}.
}

\section{Fatal errors}{

If your R function will manage to kill whole R session you will see that \emph{status} entry in log table will not get updated and it will stay as \emph{NA}.
It might be worth to schedule a watcher task to detect such cases, see \emph{How to use logR} vignette.
}
\examples{
library(data.table)
N <- 1e5
df <- data.frame(a = rnorm(N), b = sample(seq_len(as.integer(log(N))),N,TRUE))
dt <- as.data.table(df)

# log to csv
options("logR.db" = FALSE)
dfr <- logR(with(df, aggregate(a, list(b), sum)), in_rows=nrow(df))
dtr <- logR(dt[,.(a=sum(a)),,b], in_rows=nrow(dt))
err <- logR(sum(1,"a"))
war <- logR(cor(c(1,1),c(2,3)))
logR_query()
file.remove("LOGR.csv")

# log to H2 database
library(RH2)
h2 <- list(drvName = "JDBC", conn = dbConnect(H2(), "jdbc:h2:mem:"))
options("dwtools.db.conns" = list(h2=h2),
        "logR.db" = TRUE,
        "logR.conn" = "h2")
logR_schema("h2")
dfr <- logR(with(df, aggregate(a, list(b), sum)), in_rows=nrow(df))
dtr <- logR(dt[,.(a=sum(a)),,b], in_rows=nrow(dt))
err <- logR(sum(1,"a"))
war <- logR(cor(c(1,1),c(2,3)))
logR_query()
options("logR.db" = FALSE)
}
\references{
\url{https://github.com/rpremraj/mailR}
}
\seealso{
\link{logR_browser}, \link{logR_schema}, \link{schema_sql}
}

